version: "3.8"

# usage: `docker compose up` or `docker compose up --detach`
services:
  notebook-image:
    build:
      context: .
      dockerfile: notebook.Dockerfile
      args:
        FORK: ${FORK:-vyperlang}
        REF: ${REF:-master}
    image: ${NOTEBOOK_NAME:-titanoboa-notebook}
    command: ["echo", "This image is started by Jupyter"]

  vypyter:
    build:
      context: .
      dockerfile: jupyterhub.Dockerfile
    depends_on:
      - notebook-image
    restart: always
    volumes:
      # The JupyterHub configuration file
      - "./config/jupyterhub_config.py:/etc/jupyterhub/jupyterhub_config.py:ro"
      # Bind Docker socket on the host for docker-in-docker
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "./data:/data"

    image: ${HUB_NAME:-jupyterhub}
    # for child processes to connect to
    container_name: ${HUB_NAME:-jupyterhub}
    networks:
      - jupyterhub-network

    ports:
      - "${PORT:-9000}:8000"

    env_file: .env
    environment:
      # Pass its own IP for the notebooks to connect to
      HUB_CONNECT_IP: ${HUB_NAME:-jupyterhub}
      # All containers will join this network
      DOCKER_NETWORK_NAME: ${HUB_NAME:-jupyterhub}-network
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: ${NOTEBOOK_NAME:-titanoboa-notebook}
      # Using this run command
      DOCKER_SPAWN_CMD: start-singleuser.sh
      # weird things happen when nesting docker containers
      # pass the directory on the host to mount on the inner container
      PWD: "${PWD}"

networks:
  jupyterhub-network:
    name: ${HUB_NAME:-jupyterhub}-network
